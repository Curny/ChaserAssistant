// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ChaserAssistantDotNet6;
//
//    var dwd = Dwd.FromJson(jsonString);

namespace ChaserAssistantDotNet6
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Dwd
    {
        [JsonProperty("time")]
        public long Time { get; set; }

        [JsonProperty("warnings")]
        public List<Warning> Warnings { get; set; }

        [JsonProperty("copyright")]
        public string Copyright { get; set; }
    }

    public partial class Warning
    {
        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("event")]
        public string Event { get; set; }

        [JsonProperty("start")]
        public long Start { get; set; }

        [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
        public long? End { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("headLine")]
        public string HeadLine { get; set; }

        [JsonProperty("instruction")]
        public string Instruction { get; set; }

        [JsonProperty("states")]
        public List<string> States { get; set; }

        [JsonProperty("regions")]
        public List<Region> Regions { get; set; }

        [JsonProperty("bn")]
        public bool Bn { get; set; }

        [JsonProperty("isVorabinfo")]
        public bool IsVorabinfo { get; set; }
    }

    public partial class Region
    {
        [JsonProperty("svgPolygon", NullValueHandling = NullValueHandling.Ignore)]
        public string SvgPolygon { get; set; }

        [JsonProperty("altitudeStart", NullValueHandling = NullValueHandling.Ignore)]
        public long? AltitudeStart { get; set; }

        [JsonProperty("warningRegionId", NullValueHandling = NullValueHandling.Ignore)]
        public long? WarningRegionId { get; set; }
    }

    public partial class Dwd
    {
        public static Dwd FromJson(string json) => JsonConvert.DeserializeObject<Dwd>(json, ChaserAssistantDotNet6.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dwd self) => JsonConvert.SerializeObject(self, ChaserAssistantDotNet6.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
